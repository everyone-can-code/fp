[
{
	"uri": "/fp/functor/",
	"title": "Functor",
	"tags": [],
	"description": "Functional JavaScript: Functors",
	"content": " Functor So, What are Functors? Functors are the containers or type that can be used with ‘map’ function.\nGraphic graph LR; A[Functor]  Example: Container.prototype.map = (f) =\u0026gt; { return Container.of(f(this.$value)); }; Container.of(2).map(two =\u0026gt; two + 2);  [1, 2, 3].map((num) =\u0026gt; num + 2);  Read more: - https://hackernoon.com/functors-in-javascript-20a647b8f39f\n"
},
{
	"uri": "/fp/setoid/",
	"title": "Setoid",
	"tags": [],
	"description": "Setoid",
	"content": " Setoid A value which has a Setoid must provide an equals method. The equals method takes one argument:\nGraphic graph LR; A[Setoid]  Example: Ramda: import { equals } from 'ramda' equals([1, 2], [1, 2]) // true equals([1, 2], [0]) // false  Ramda (currying): import { equals } from 'ramda' equals([1, 2])([1, 2]) // true equals([1, 2])([0]) // false  Read More:  https://medium.com/devschacht/tom-harding-fantas-eel-and-specification-3-setoid-78c2a0e8cc07 http://www.tomharding.me/2017/03/09/fantas-eel-and-specification-3/  "
},
{
	"uri": "/fp/ord/",
	"title": "Ord",
	"tags": [],
	"description": "Ord",
	"content": " Ord Ord is almost identical to Setoid’s equals, the only difference is that, this time, we return a boolean to indicate whether this \u0026lt;= that, rather than this == that. Using only lte and equals (because every Ord is a Setoid), we can derive all the things we might want:\nGraphic graph LR; A[Setoid] -- B(Ord)  Example import { equals } from 'ramda' // Greater than. The OPPOSITE of lte. // gt :: Ord a =\u0026gt; a -\u0026gt; a -\u0026gt; Boolean const gt = (x, y) =\u0026gt; { return !lte(x, y) } // Greater than or equal. // gte :: Ord a =\u0026gt; a -\u0026gt; a -\u0026gt; Boolean const gte = (x, y) =\u0026gt; { return gt(x, y) || equals(x)(y) } // Less than. The OPPOSITE of gte! // lt :: Ord a =\u0026gt; a -\u0026gt; a -\u0026gt; Boolean const lt = (x, y) =\u0026gt; { return !gte(x, y) } // lte :: Ord a =\u0026gt; a -\u0026gt; a -\u0026gt; Boolean const lte = (x, y) =\u0026gt; { return x \u0026lt;= y }  Read more: - http://www.tomharding.me/2017/04/09/fantas-eel-and-specification-3.5/\n"
},
{
	"uri": "/fp/semigroup/",
	"title": "Semigroup",
	"tags": [],
	"description": "Semigroup",
	"content": " Semigroup Graphic graph LR; A[Semigroup]  Semigroup must have a concat method. The concat method takes one argument: s.concat(b)\nA Semigroup’s concat method must take another value of the same type, and return a third value of the same type.\nExamples JavaScript’s \u0026ldquo;String\u0026rdquo; type is already semigroup: // 'hello, world!' 'hello'.concat(', world!') // This operation is associative, too! 'hello'.concat(', ').concat('world!') 'hello'.concat(', '.concat('world!'))  JavaScript’s \u0026ldquo;Arrays\u0026rdquo; are already valid semigroups, too: [1, 2].concat([3, 4]) // [1, 2, 3, 4] // Aaand it's associative! [1].concat([2, 3]).concat([4]) [1].concat([2, 3].concat([4]))  Read More:  http://www.tomharding.me/2017/03/13/fantas-eel-and-specification-4/  "
},
{
	"uri": "/fp/monoid/",
	"title": "Monoid",
	"tags": [],
	"description": "Monoid",
	"content": " Monoid Graphic graph LR; A[Semigroup] -- B(Monoid)  BUT not every semigroup is a monoid\u0026hellip;\nRead More:  http://www.tomharding.me/2017/03/21/fantas-eel-and-specification-5/ https://marmelab.com/blog/2018/04/18/functional-programming-2-monoid.html  "
},
{
	"uri": "/fp/alt/",
	"title": "Alt",
	"tags": [],
	"description": "Alt",
	"content": " Alt "
},
{
	"uri": "/fp/foldable/",
	"title": "Foldable",
	"tags": [],
	"description": "Foldable",
	"content": " Foldable A value which has a Foldable must provide a reduce method. The reduce method takes two arguments:\nu.reduce(f, x)\nGraphic graph LR; A[Foldable]  Example: Ramda: const toArray xs =\u0026gt; xs.reduce( (acc, x) =\u0026gt; acc.concat([x]), [] ) u.reduce(f) === toArray(u).reduce(f)  Read More:  http://www.tomharding.me/2017/05/01/fantas-eel-and-specification-11/  "
},
{
	"uri": "/fp/traversable/",
	"title": "Traversable",
	"tags": [],
	"description": "Traversable",
	"content": " Traversable -\nGraphic graph LR; A[Foldable] -- C{Decision} B[Functor] -- C[Traversable]  Example: Ramda: -  Read More:  http://www.tomharding.me/2017/05/08/fantas-eel-and-specification-12/  "
},
{
	"uri": "/fp/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/fp/",
	"title": "Functional Programming (Fantasy Land JavaScript specification Guide)",
	"tags": [],
	"description": "",
	"content": " Functional Programming (Fantasy Land JavaScript specification Guide) Basics Read books and Articles  http://www.tomharding.me/fantasy-land/ https://github.com/MostlyAdequate/mostly-adequate-guide, https://mostly-adequate.gitbooks.io/mostly-adequate-guide/ https://github.com/fantasyland/fantasy-land https://habr.com/company/mailru/blog/327522/ http://daynin.github.io/functional-js/ http://telegra.ph/Vvedenie-v-FP-06-26 https://drive.google.com/open?id=1Fg8fnpoyGx50v1C1FzDq8xgNo0Xb45Fo https://drive.google.com/open?id=1j1IUHjiKYs3WSzgYQT294Eyro9JosoXT https://medium.com/devschacht/%D1%81%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F-fantasy-land-bf81121b58cb  Video courses (Russian)  https://stepik.org/course/75 https://stepik.org/course/693/  Libraries to write Functional Programming in JavaScript  https://ramdajs.com/  "
},
{
	"uri": "/fp/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]